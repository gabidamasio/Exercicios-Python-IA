{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM90U/x7jb52QAq77YnL/u4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cvBesmaZ2NBJ","executionInfo":{"status":"ok","timestamp":1716403676635,"user_tz":180,"elapsed":14742,"user":{"displayName":"Gabriela Damásio","userId":"13733991996494219194"}},"outputId":"bbd5af70-896d-4edf-fc8b-eaba42d9f78c","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","O texto é classificado como Spam.\n"]}],"source":["!pip install pandas\n","!pip install scikit-learn\n","\n","import pandas as pd\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","import zipfile\n","from io import BytesIO\n","import requests\n","\n","#professor, não consegui usar a dataset fornecida pois não conseguia fazer o download do arquivo diretamente do link\n","#tentei fazer o upload manual, mas não consegui baixar o ficheiro, pois meu computador acusava vírus, por isso utilizei outro dataset\n","\n","url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip\"\n","response = requests.get(url)\n","with zipfile.ZipFile(BytesIO(response.content)) as z:\n","    with z.open('SMSSpamCollection') as f:\n","        sms_data = pd.read_csv(f, sep='\\t', names=[\"label\", \"text\"])\n","\n","X_train, X_test, y_train, y_test = train_test_split(sms_data['text'], sms_data['label'], test_size=0.2, random_state=42)\n","vectorizer = CountVectorizer()\n","X_train_vectorized = vectorizer.fit_transform(X_train)\n","model = LogisticRegression()\n","model.fit(X_train_vectorized, y_train)\n","texto = [\"Congratulations! You have been selected as the winner of the $1 million lottery prize! To claim your prize, click the link below and enter your personal information.\"]\n","\n","texto_vectorized = vectorizer.transform(texto)\n","classificacao = model.predict(texto_vectorized)\n","\n","if classificacao[0] == 'spam':\n","    print(\"O texto é classificado como Spam.\")\n","else:\n","    print(\"O texto é classificado como Não Spam.\")\n"]}]}