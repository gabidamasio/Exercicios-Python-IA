{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNBxhR8xd3RjKKTkTb4X2Hv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Cq0fXlntSiWf4ygeOBapvfiwPd5Ph7Tm"},"id":"qY58zIxDdW4J","executionInfo":{"status":"ok","timestamp":1722470042283,"user_tz":180,"elapsed":2738626,"user":{"displayName":"Gabriela Damásio","userId":"13733991996494219194"}},"outputId":"6d54eaf7-20a3-4ce8-9df7-c83b8f765ec4"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["!pip install ultralytics\n","!pip install opencv-python\n","!pip install matplotlib\n","\n","import cv2\n","import math\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from ultralytics import YOLO\n","from ultralytics.utils.plotting import Annotator\n","from ultralytics.solutions import speed_estimation\n","from google.colab.patches import cv2_imshow\n","\n","def create_pie_chart(data):\n","    fig, ax = plt.subplots(figsize=(4, 3))\n","    ax.pie(data.values(), labels=data.keys(), autopct='%1.1f%%')\n","    ax.legend()\n","    ax.set_title(\"Percentual Total de Cada Classe\")\n","    plt.close(fig)\n","    return fig\n","\n","def create_area_plot(class_counts_over_time):\n","    fig, ax = plt.subplots(figsize=(4, 3))\n","    for cls, counts in class_counts_over_time.items():\n","        ax.fill_between(range(len(counts)), counts, label=cls)\n","    ax.set_title(\"Contagem de Classes ao Longo do Tempo\")\n","    ax.set_xlabel(\"Número de Frames\")\n","    ax.set_ylabel(\"Contagem\")\n","    ax.legend()\n","    plt.close(fig)\n","    return fig\n","\n","def create_multiple_line_plot(speed_data, distance_data, frame_count):\n","    fig, ax = plt.subplots(figsize=(6, 4))\n","    if speed_data:\n","        for track_id, speeds in speed_data.items():\n","            ax.plot(range(len(speeds)), speeds, label=f'Speed Track {track_id}')\n","    if distance_data:\n","        for track_id, distances in distance_data.items():\n","            ax.plot(range(len(distances)), distances, label=f'Distance Track {track_id}', linestyle='--')\n","    ax.set_title(\"Velocidade e Distância ao Longo do Tempo\")\n","    ax.set_xlabel(\"Número de Frames\")\n","    ax.set_ylabel(\"Valor\")\n","    ax.legend()\n","    plt.close(fig)\n","    return fig\n","\n","def fig_to_img(fig):\n","    fig.canvas.draw()\n","    img = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)\n","    img = img.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n","    return img\n","\n","def resize_and_place_image(base_image, overlay_image, position):\n","    overlay_image_resized = cv2.resize(overlay_image, (base_image.shape[1] // 3, base_image.shape[0] // 3))\n","    x, y = position\n","    base_image[y:y + overlay_image_resized.shape[0], x:x + overlay_image_resized.shape[1]] = overlay_image_resized\n","    return base_image\n","\n","def draw_visualizations(frame, data, labels, speed_data, distance_data, class_counts_over_time, frame_count):\n","    vis_frame = np.zeros((frame.shape[0], frame.shape[1] // 3, 3), dtype=np.uint8)\n","\n","    if data:\n","        pie_chart = create_pie_chart(data)\n","        pie_chart_img = fig_to_img(pie_chart)\n","        vis_frame = resize_and_place_image(vis_frame, pie_chart_img, (0, 0))\n","\n","    if class_counts_over_time:\n","        area_plot = create_area_plot(class_counts_over_time)\n","        area_plot_img = fig_to_img(area_plot)\n","        vis_frame = resize_and_place_image(vis_frame, area_plot_img, (0, vis_frame.shape[0] // 3))\n","\n","    if speed_data or distance_data:\n","        line_plot = create_multiple_line_plot(speed_data, distance_data, frame_count)\n","        line_plot_img = fig_to_img(line_plot)\n","        vis_frame = resize_and_place_image(vis_frame, line_plot_img, (0, 2 * (vis_frame.shape[0] // 3)))\n","\n","    combined_frame = np.hstack((frame, vis_frame))\n","    return combined_frame\n","\n","try:\n","    object_detection_model = YOLO(\"yolov8s.pt\")\n","    speed_estimation_model = YOLO(\"yolov8n.pt\")\n","except Exception as e:\n","    print(f\"Erro ao carregar os modelos: {e}\")\n","    exit()\n","\n","print(\"IDs das classes no modelo:\", object_detection_model.names)\n","\n","cap = cv2.VideoCapture(\"/content/vicario.mp4\")\n","if not cap.isOpened():\n","    print(\"Erro ao ler o arquivo de vídeo. Verifique o caminho e a existência do arquivo.\")\n","    exit()\n","\n","w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))\n","out = cv2.VideoWriter(\"Distribution_speed_distance_visual_scatter_unique1hor_car_overall.avi\", cv2.VideoWriter_fourcc(*\"MJPG\"), 15, (w + w // 3, h))\n","\n","frame_count = 0\n","data = {}\n","labels = []\n","class_counts_over_time = {}\n","speed_over_time = {}\n","distance_over_time = {}\n","\n","center_point = (0, h)\n","pixel_per_meter = 10\n","\n","line_pts = [(0, 360), (1280, 360)]\n","speed_obj = speed_estimation.SpeedEstimator(names=speed_estimation_model.model.names, reg_pts=line_pts, view_img=False)\n","\n","txt_color, txt_background, bbox_clr = ((0, 0, 0), (255, 255, 255), (255, 0, 255))\n","\n","print(\"Digite as classes desejadas com seus IDs (formato: 'classe1:id1,classe2:id2,...'): \")\n","print(\"Exemplo: 'person:0,sports ball:32'\")\n","user_input = input().strip()\n","desired_classes = {}\n","\n","try:\n","    for item in user_input.split(','):\n","        cls, cls_id = item.split(':')\n","        desired_classes[cls.strip()] = int(cls_id.strip())\n","except ValueError:\n","    print(\"Formato de entrada inválido. Use o formato 'classe:id'.\")\n","    exit()\n","\n","while cap.isOpened():\n","    success, frame = cap.read()\n","    if not success:\n","        print(\"Erro ao ler o frame do vídeo.\")\n","        break\n","\n","    frame_count += 1\n","    speed_tracks = speed_estimation_model.track(frame, persist=True, show=False)\n","    frame = speed_obj.estimate_speed(frame, speed_tracks)\n","    annotator = Annotator(frame, line_width=2)\n","    results = object_detection_model.track(frame, persist=True)\n","\n","    print(\"Detecções:\", results)\n","\n","    if results[0].boxes.id is not None:\n","        boxes = results[0].boxes.xyxy.cpu()\n","        track_ids = results[0].boxes.id.int().cpu().tolist()\n","        clss = results[0].boxes.cls.cpu().tolist()\n","\n","        for box, track_id, cls in zip(boxes, track_ids, clss):\n","            cls_name = object_detection_model.names[int(cls)]\n","            print(f\"Classe detectada: {cls_name} com ID: {cls}\")\n","            if cls_name in desired_classes and desired_classes[cls_name] == cls:\n","                if cls_name not in data:\n","                    data[cls_name] = 1\n","                else:\n","                    data[cls_name] += 1\n","\n","                annotator.box_label(box, label=str(track_id), color=bbox_clr)\n","                annotator.visioneye(box, center_point)\n","\n","                x1, y1 = int((box[0] + box[2]) // 2), int((box[1] + box[3]) // 2)\n","\n","                distance = (math.sqrt((x1 - center_point[0]) ** 2 + (y1 - center_point[1]) ** 2)) / pixel_per_meter\n","\n","                text_size, _ = cv2.getTextSize(f\"Distância: {distance:.2f} m\", cv2.FONT_HERSHEY_SIMPLEX, 1.2, 3)\n","                cv2.rectangle(frame, (x1, y1 - text_size[1] - 10), (x1 + text_size[0] + 10, y1), txt_background, -1)\n","                cv2.putText(frame, f\"Distância: {distance:.2f} m\", (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1.2, txt_color, 3)\n","\n","                if track_id not in distance_over_time:\n","                    distance_over_time[track_id] = [distance]\n","                    speed_over_time[track_id] = []\n","                else:\n","                    distance_over_time[track_id].append(distance)\n","\n","                    if track_id < len(speed_tracks) and 'speed' in speed_tracks[track_id]:\n","                        speed_over_time[track_id].append(speed_tracks[track_id]['speed'])\n","                    else:\n","                        print(f\"ID do rastreamento {track_id} não encontrado em speed_tracks.\")\n","\n","    print(\"Contagens de classe:\", data)\n","\n","    vis_frame = draw_visualizations(frame, data, labels, speed_over_time, distance_over_time, class_counts_over_time, frame_count)\n","    out.write(vis_frame)\n","    cv2_imshow(vis_frame)\n","    cv2.imwrite(f'output_frame_{frame_count}.jpg', vis_frame)\n","\n","cap.release()\n","out.release()\n","cv2.destroyAllWindows()\n","\n","\n"]}]}